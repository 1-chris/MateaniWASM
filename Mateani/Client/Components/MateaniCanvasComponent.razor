@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using System.Globalization
@using Mateani.Shared.Classes
@using Mateani.Shared.Extensions

<div class="canvasControls">
    <button @onclick="ToggleRenderLoop">render on/off</button>
    <label>@_enableRenderLoop.ToString()</label>
    <label for="colorPicker">Color:</label>
    <input type="color" id="colorPicker" value="@_selectedColorHex" @oninput="OnColorChanged"/>
    <label for="alphaRange">Alpha:</label>
    <input type="range" id="alphaRange" min="0" max="255" value="@_colorAlpha.ToString()" @oninput="OnAlphaChanged"/>
    <label for="alphaRange">Size:</label>
    <input type="range" id="alphaRange" min="0" max="64" @bind="_selectedBrushSize"/>
</div>


<div style="width:100vw; height:90vh;" class="canvas">
    @if (!_initializationComplete)
    {
        <h2>loading...</h2>
    }
    else
    {
        <SKGLView class="canvas" OnPaintSurface="PaintSurface" EnableRenderLoop="@_enableRenderLoop" style="width: 100%; height: 95%" @onmousemove="OnMouseMovement" @onmousedown="OnMouseDown" @onmouseup="OnMouseUp" @ontouchmove="OnTouchMove"/>
        
    }
</div>

@code {
    private bool _initializationComplete;
    private double _mouseOffsetX;
    private double _mouseOffsetY;
    private bool _leftMouseDown;
    private bool _rightMouseDown;
    private bool _middleMouseDown;
    private bool _anyMouseDown;
    private List<SKPaint>? _paints = new();
    private SKPaint? _activePaint = new();
    private List<DrawingCommand> _commands = new();

    private bool _enableRenderLoop;
    private bool _toggleRenderLoopEnabled = true;

    private uint _selectedColorArgb;
    private string? _selectedColorHex = "#1f1d1d";
    private int _colorAlpha = 255;
    private int _selectedBrushSize = 5;

    protected override async void OnInitialized()
    {
        _enableRenderLoop = true;
        uint argb = uint.Parse("ff1f1d1d", NumberStyles.HexNumber);
        var paint = new SKPaint
        {
            Color = new SKColor(argb),
            StrokeWidth = _selectedBrushSize
        };
        _paints.Add(paint);
        _activePaint = paint;
        Console.WriteLine("paint added");
        
        RenderLoopEnabler();
        _initializationComplete = true;
    }

    private void ToggleRenderLoop()
    {
        _toggleRenderLoopEnabled = !_toggleRenderLoopEnabled;
    }

    private async Task RenderLoopEnabler()
    {
        while (true)
        {
            _enableRenderLoop = _toggleRenderLoopEnabled;
            await Task.Delay(200);
       }
    }
    
    private void OnColorChanged(ChangeEventArgs e)
    {
        // cannot overload method so this is a workaround
        if (e?.Value?.ToString() != null) _selectedColorHex = e.Value.ToString();
        
        Console.WriteLine($"OnColorChanged called {_selectedColorHex}");
        var colorHex = _selectedColorHex?.Replace("#", ""); // Remove #

        if (colorHex != null && colorHex.Length == 6) // Check to ensure it's a valid color value
        {
            var finalColorHex = _colorAlpha.ToString("X2") + colorHex; // Add alpha at the start
            Console.WriteLine($"Final color with alpha: {finalColorHex}");
            uint argb = uint.Parse(finalColorHex, NumberStyles.HexNumber);

            if (_activePaint != null) _activePaint.Color = new SKColor(argb);
        }
        else
        {
            Console.WriteLine($"Invalid colorHex value: {colorHex}");
        }
    }
    
    private void OnAlphaChanged(ChangeEventArgs e)
    {
        _colorAlpha = Convert.ToInt32(e.Value);
        Console.WriteLine($"Alpha changed: {_colorAlpha}");
        OnColorChanged(null);
    }

    private async void OnTouchMove(TouchEventArgs e)
    {
        var firstTouch = e.Touches.First();
        _mouseOffsetX = firstTouch.ClientX;
        _mouseOffsetY = firstTouch.ClientY;
        var command = new DrawingCommand
        {
            X = (float)_mouseOffsetX,
            Y = (float)_mouseOffsetY,
            Size = _selectedBrushSize,
            Color = _activePaint.Color.ToUint()
        };
            
        _commands.Add(command);
        StateHasChanged();
    }
    
    private void OnMouseDown(MouseEventArgs args)
    {
        switch (args.Button)
        {
            case 0:
                _leftMouseDown = true;
                break;
            case 1:
                _middleMouseDown = true;
                break;
            case 2:
                _rightMouseDown = true;
                break;
        }
        _anyMouseDown = _rightMouseDown || _middleMouseDown || _leftMouseDown;
    }

    private void OnMouseUp(MouseEventArgs args)
    {
        _leftMouseDown = false;
        _middleMouseDown = false;
        _rightMouseDown = false;
        _anyMouseDown = false;
    }
    
    private void OnMouseMovement(MouseEventArgs args)
    {
        _mouseOffsetX = args.OffsetX;
        _mouseOffsetY = args.OffsetY;

        if (_anyMouseDown && _activePaint is not null)
        {
            var command = new DrawingCommand
            {
                X = (float)_mouseOffsetX,
                Y = (float)_mouseOffsetY,
                Size = _selectedBrushSize,
                Color = _activePaint.Color.ToUint()
            };
            
            _commands.Add(command);
            StateHasChanged();
        }
    }

    private async void PaintSurface(SKPaintGLSurfaceEventArgs e)
    {
        var surface = e.Surface;
        surface.Canvas.Clear(SKColors.Bisque);
        
        foreach (var command in _commands)
        {
            var paint = new SKPaint
            {
                Color = command.Color,
                StrokeWidth = command.Size
            };
            surface.Canvas.DrawCircle(command.X, command.Y, command.Size, paint);
        }
    }
}